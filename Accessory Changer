local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
   Name = "Golden Star Hub",
   Icon = 129410345576492, -- Icon in Topbar. Can use Lucide Icons (string) or Roblox Image (number). 0 to use no icon (default).
   LoadingTitle = "Golden Star",
   LoadingSubtitle = "by BCS",
   ShowText = "Golden Star", -- for mobile users to unhide rayfield, change if you'd like
   Theme = "Green", -- Check https://docs.sirius.menu/rayfield/configuration/themes

   ToggleUIKeybind = "K", -- The keybind to toggle the UI visibility (string like "K" or Enum.KeyCode)

   DisableRayfieldPrompts = false,
   DisableBuildWarnings = false, -- Prevents Rayfield from warning when the script has a version mismatch with the interface

   ConfigurationSaving = {
      Enabled = true,
      FolderName = nil, -- Create a custom folder for your hub/game
      FileName = "Golden Star Hub"
   },

   Discord = {
      Enabled = false, -- Prompt the user to join your Discord server if their executor supports it
      Invite = "noinvitelink", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ ABCD would be ABCD
      RememberJoins = true -- Set this to false to make them join the discord every time they load it up
   },

   KeySystem = false, -- Set this to true to use our key system
   KeySettings = {
      Title = "Untitled",
      Subtitle = "Key System",
      Note = "No method of obtaining the key is provided", -- Use this to tell the user how to get a key
      FileName = "Key", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
      SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
      GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
      Key = {"Hello"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
   }
})



local AcessoryTab = Window:CreateTab("Acessory Changer")

local AcessoryInput = AcessoryTab:CreateInput({
   Name = "Acessory ID",
   CurrentValue = "",
   PlaceholderText = "Input Model ID",
   RemoveTextAfterFocusLost = false,
   Flag = "Input1",
   Callback = function(Text)
   print("The Acessory Input has been changed to " .. Text)
   end,
})


local Button = AcessoryTab:CreateButton({
   Name = "Apply Acessory",
   Callback = function()
   --// Settings
local ID = AcessoryInput.CurrentValue

--// Services
local Players = game:GetService("Players")
local Player = Players.LocalPlayer
local Character = Player.Character or Player.CharacterAdded:Wait()

--// Function: Weld two parts together
local function WeldParts(part0, part1)
	local weld = Instance.new("Weld")
	weld.Part0 = part0
	weld.Part1 = part1
	weld.C0 = part0.CFrame:inverse() * part1.CFrame
	weld.Parent = part0
	return weld
end

--// Function: Force attach an accessory to character
local function ForceAttachAccessory(Accessory)
	if not Accessory:IsA("Accessory") then
		warn("Provided instance is not an Accessory.")
		return
	end

	local accClone = Accessory:Clone()
	accClone.Parent = Character

	-- Try using Humanoid:AddAccessory()
	local hum = Character:FindFirstChildOfClass("Humanoid")
	local success = false
	if hum then
		success = pcall(function()
			hum:AddAccessory(accClone)
		end)
	end

	-- If AddAccessory failed, manually weld
	if not success then
		local handle = accClone:FindFirstChild("Handle")
		if handle then
			local attachTo = Character:FindFirstChild("Head") or Character:FindFirstChildWhichIsA("BasePart")
			if attachTo then
				WeldParts(handle, attachTo)
				handle.Anchored = false
				handle.Massless = true
			end
		end
	end
end

--// Main Loader
local function LoadAccessoryFromModel(id)
	local success, asset = pcall(function()
		return game:GetObjects("rbxassetid://" .. id)[1]
	end)

	if not success or not asset then
		warn("⚠️ Failed to load model with ID:", id)
		return
	end

	-- Find the accessory inside
	local accessory = nil
	if asset:IsA("Accessory") then
		accessory = asset
	else
		accessory = asset:FindFirstChildWhichIsA("Accessory", true)
	end

	if not accessory then
		warn("❌ No Accessory found inside model ID:", id)
		return
	end

	ForceAttachAccessory(accessory)
end

--// Execute
LoadAccessoryFromModel(ID)

   end,
})
